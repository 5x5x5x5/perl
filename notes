use csv module

list::util module

text::csv

hash = associative array
nested list of for loops to unwind a table

version 14 vs 22
keys to refernce a hash - doesn't work in future versions

unrolled list of pairs allows you to join two hashes

use Data::Dumper
allows you to pretty print hashes

arrays of hashes forever

hashes are used to check uniqueness - use 'exist' to check without autovivification.

perldata
perlre
metacpan

perl -MText::CSV -e 1 - if it doesn't exist then errors abound

psh
Repl
psh

## Lesson 1
#### Syntax Summary
|**Code**|**Function**|
| --- |:--- |
| # | begins a comment line |
| #! | she-bang, a directive |
| print | prints to standard output (usually screen) |
| ; | every Perl statement ends in a semicolon |
| \n | new line |
| "" | defines text enclosed as string data |

| **Numeric Operators** |
|**Operator**|**Name**|**Example**|**Result**|
|:---:| --- | --- |:---:|
| + | addition | | |
| - | subtraction | | |
| * | multiplication | | |
| / | division | | |
| % | modulus | | |
| ** | power | | |

| **String Operators** |
|**Operator**|**Name**|**Example**|**Result**|
| . | concatenation | `print "ab" . "cd";` | abcd |
| x | repetition | `print "hi" x 5; | hihihihihi |

**Binary Assignment Operators**
+= -+ *= /= **= .=

**Comparison Operators**
== eq != ne < lt > gt <= le >= ge




## Chapter 2 continued
 Getting user input
  <STDIN> - where scalar is expected, reads complete text from line from standard input
  stop and wait for \n
 chomp operator
  removes \n from string.
  works on scalar string variable
   chomp($textinput = <STDIN>);
 while control structure
  $count = 0;
  while($count < 10) {
   $count += 2;
   print "count is now $count\n"; # gives values 2 4 6 8 10
  }
 undef value
 defined function
  to tell whether a value is *undef* and not the empty string
  returns false for undef
## Lists and Arrays: Chapter 3
 lists - ordered collection of scalars
 array - variable that contains a list
 Accessing elements of arrays
  $array[0] is the first element 
 Special array indicies
  arrays automatically extend to new far-flung elements 
  last element [-1]
 List leterals
  list of csv in parenthesis
  .. range operator
  elements of a list literal can be expressions - evaluated each time the literal is used.
 qw shortcut
 List assignment
  too easy to swap variables' values
  ($cause, $effect) = ($effect, $cause)
  ($critical_parameter[0], $critical_parameter[1]) = ($critical_parameter[1], $critical_parameter[0])
  @array  # all of the elements of the array 
  @rocks = qw/ granite quartz limestone/;
  list of list possible
 pop and push operators
  pop removes and returns the last element of an array
  push add an element of list to the end of an array
 shift and unshift operators
 Interpolating arrays into strings
  @ interpolates
  watch out for email addresses - use '   '
 foreach control structure
  step through a list of values, executing one iteration for each value
  foreach $rock (qw/ slate limestone quartz /){
    print "One rock is $rock.\n"; # Prints rock names again and again
   }
  the control variable actually IS the list element - not a copy
 $_ Perl's favorite default
 reverse operator
  it reverses things like ..
 sort operator
## Context?
 Scalar and List Context
  something can be a single, scalar value in one case and a list in another
 Using list-producing expressions in a Scalar context
 Using scalar-producing expressions in List context
 Forcing scalar context
 <STDIN> in list context
  @lines = <STDIN>;  # returns standard input in list context
   creates list of each line until EOF (CTR-D)
    chomp(@lines); # to chomp them all at once

 Matt is talking about Modules
metacpan!!

text::CSV
$line =~ 's/\r?\n/'

cpanratings

Getopt::Long 

find and find2perl

cwd
List::Util
List::MoreUtils
local::lib - make environment at the command line
Storable - data serialization - just not XML - YAML is good
EA.pm
ea db
DBI
Batch.pm <- batch.cgi fro


perlmonks.org 

